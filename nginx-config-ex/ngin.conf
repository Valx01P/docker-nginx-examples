user  nginx;
worker_processes auto;

error_log /var/log/nginx/error.log warn;
pid       /var/run/nginx.pid;

events {
    worker_connections 1024;
}

http {
    # Basic configs
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;
    sendfile      on;
    keepalive_timeout  65;
    
    # Logging
    log_format main '$remote_addr - $remote_user [$time_local] '
                    '"$request" $status $body_bytes_sent '
                    '"$http_referer" "$http_user_agent" "$http_x_forwarded_for"';
    access_log /var/log/nginx/access.log main;

    # Gzip compression
    gzip on;
    gzip_comp_level 5;
    gzip_types text/plain text/css application/json application/javascript application/xml;

    # Cache
    proxy_cache_path /var/cache/nginx keys_zone=mycache:10m;
    
    # Load Balancing Upstream
    upstream myapp_backend {
        least_conn;
        server 127.0.0.1:5001;
        server 127.0.0.1:5002;
    }

    server {
        listen 80;
        server_name example.com www.example.com;

        # Enforce HTTPS (optional)
        # return 301 https://$host$request_uri;

        location / {
            proxy_cache mycache;
            proxy_cache_valid 200 1m;

            proxy_pass http://myapp_backend;

            # Proxy Headers
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }

        # Serve static files directly from NGINX
        location /static/ {
            alias /var/www/static/;
            expires 30d;
        }
    }

    # Example HTTPS server block
    server {
        listen 443 ssl http2;
        server_name example.com;
        
        ssl_certificate     /etc/ssl/certs/example.com.crt;
        ssl_certificate_key /etc/ssl/private/example.com.key;
        ssl_protocols       TLSv1.2 TLSv1.3;
        ssl_ciphers         HIGH:!aNULL:!MD5;

        location / {
            proxy_pass http://myapp_backend;
        }
    }
}
